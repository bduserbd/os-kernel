# CPUs.
ifndef CPUS
  CPUS = 1
endif

BUILD_CPPFLAGS += -D K_CONFIG_CPUS=$(CPUS)

ifneq ($(CPUS),1)
  BUILD_CPPFLAGS += -D K_CONFIG_SMP
  export AP_BIN=ap.bin
endif

export CPUS

# Firmware - BIOS is default.
ifndef FIRMWARE
  FIRMWARE=BIOS
endif

ifeq ($(FIRMWARE),BIOS)
  BUILD_CPPFLAGS += -D K_CONFIG_BIOS
  FIRMWARE_TARGET := bios-grub-iso
else ifeq ($(FIRMWARE),UEFI)
  BUILD_CPPFLAGS += -D K_CONFIG_UEFI
  FIRMWARE_TARGET := uefi-grub
else
  $(error Unsupported firmware type (choose BIOS/UEFI))
endif

export FIRMWARE

# Architecture.
SYSTEM_ARCH = $(shell uname -p | sed -e s/i.86/x86/ -e s/x86_64/x86/)
ARCH ?= $(SYSTEM_ARCH)

ifeq ($(ARCH),x86)
  _SUB_X86_ARCH = $(shell uname -p | sed -e s/i.86/i386/)
  SUB_X86_ARCH ?= $(_SUB_X86_ARCH)

  ifeq ($(SUB_X86_ARCH),i386)
    BUILD_CFLAGS += -m32
    BUILD_CPPFLAGS += -D K_BITS_32
  else ifeq ($(SUB_X86_ARCH),x86_64)
    BUILD_CFLAGS += -m64
    BUILD_CPPFLAGS += -D K_BITS_64
  else
    $(error Unsupported architecture type)
  endif

  BUILD_LDFLAGS += -melf_$(SUB_X86_ARCH)

  export SUB_X86_ARCH
else
  $(error Unsupported architecture type)
endif

export ARCH

# Kernel base & offset
BUILD_CPPFLAGS += -D K_IMAGE_BASE=0x00000000
BUILD_CPPFLAGS += -D K_IMAGE_OFFSET=0x100000

# Kernel stack size
BUILD_CPPFLAGS += -D K_CONFIG_STACK_SIZE=0x10000

# First User Mode executable
BUILD_CPPFLAGS += -D K_CONFIG_USER_MODE_EXECUTABLE=0x10000

